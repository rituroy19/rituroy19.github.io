(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.vl = {}));
}(this, (function (exports) { 'use strict';

  const Data = Symbol('data');
  let id_counter = 0;

  function id(prefix) {
    return (prefix || '') + (++id_counter);
  }

  const prototype = {
    toJSON: function() { return toJSON(this); }
  };

  function proto(ctr) {
    if (ctr) {
      var p = (ctr.prototype = Object.create(prototype));
      p.constructor = ctr;
      return p;
    } else {
      return prototype;
    }
  }

  function assign(target, ...sources) {
    if (sources.length === 1 && Array.isArray(sources[0])) {
      target[Data] = sources[0];
    } else {
      sources.forEach(s => {
        Object.assign(target[Data], isObject(s) && s[Data] || s);
      });
    }
    return target;
  }

  function flat(value) {
    return Array.isArray(value) ? [].concat(...value) : value;
  }

  function get(obj, name) {
    return obj[Data][name];
  }

  function set(obj, name, value) {
    obj[Data][name] = object(value);
  }

  function copy(obj) {
    const mod = Object.create(Object.getPrototypeOf(obj));
    Object.assign(mod, obj);
    mod[Data] = Object.assign({}, obj[Data]);
    return mod;
  }

  function init(obj, value) {
    obj[Data] = value || {};
  }

  function recurse(d, flag) {
    return d && d.toJSON ? d.toJSON(flag) : toJSON(d);
  }

  function toJSON(value) {
    if (isArray(value)) {
      return value.map(d => recurse(d));
    } else if (isObject(value)) {
      const data = value[Data] || value;
      return isArray(data)
        ? recurse(data)
        : Object.keys(data).reduce((_, k) => {
            _[k] = recurse(data[k]);
            return _;
          }, {});
    } else {
      return value;
    }
  }

  function object(value) {
    return (isObject(value) && !value[Data]) ? {[Data]: value || {}} : value;
  }

  function merge(flag, ...values) {
    const objects = [].concat(...values).map(_ => recurse(_, flag));
    return object(Object.assign({}, ...objects));
  }

  function nest(obj, keys, rest) {
    const m = keys.reduce((m, k) => (m[k] = 1, m), {}),
          u = {}, v = {};

    for (let k in obj) (m[k] ? u : v)[k] = obj[k];
    u[rest] = v;
    return u;
  }

  // -- type checkers --

  const isArray = Array.isArray;

  function isObject(_) {
    return _ === Object(_) && !isArray(_);
  }

  function isString(_) {
    return typeof _ === 'string';
  }

  var _opt;

  // TODO: validation

  function options(...viewopt) {
    const opt = Object.assign({}, _opt);
    opt.view = Object.assign({}, _opt.view, ...viewopt);
    return opt;
  }

  function element() {
    return typeof document === 'undefined' ? undefined
      : document.createElement('div');
  }

  function createSpec(self) {
    const major = exports.vegalite ? exports.vegalite.version.split('.')[0] : '3';
    return Object.assign(
      {$schema: `https://vega.github.io/schema/vega-lite/v${major}.json`},
      self.toJSON()
    );
  }

  function createView(self, opt) {
    if (!exports.vegalite || !exports.vega) {
      throw Error('Vega / Vega-Lite not registered. Use the "register" method.');
    }

    const spec = exports.vegalite.compile(createSpec(self), opt.config),
          view = new exports.vega.View(exports.vega.parse(spec.spec), opt.view);

    if (opt.init) opt.init(view);

    return view;
  }

  async function render(opt) {
    opt = options({container: opt && opt.container || element()}, opt);

    const view = await createView(this, opt).runAsync(),
          div = view.container() || {};

    div.value = view;
    return div;
  }

  function toView(opt) {
    return createView(this, options(opt));
  }

  function toSpec() {
    return createSpec(this);
  }

  function toString(space) {
    return JSON.stringify(createSpec(this), null, space);
  }

  function register(vega, vegalite, options) {
    exports.vegalite = vegalite;
    exports.vega = vega;
    _opt = options || {};
    return this;
  }

  function __repeat(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "repeat", args[0]);
    if (args[1] !== undefined) set(this, "spec", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1 = proto(__repeat);

  prototype$1.align = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "align", value);
      return obj;
    } else {
      return get(this, "align");
    }
  };

  prototype$1.autosize = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "autosize", value);
      return obj;
    } else {
      return get(this, "autosize");
    }
  };

  prototype$1.background = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "background", value);
      return obj;
    } else {
      return get(this, "background");
    }
  };

  prototype$1.bounds = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bounds", value);
      return obj;
    } else {
      return get(this, "bounds");
    }
  };

  prototype$1.center = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "center", value);
      return obj;
    } else {
      return get(this, "center");
    }
  };

  prototype$1.columns = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "columns", value);
      return obj;
    } else {
      return get(this, "columns");
    }
  };

  prototype$1.config = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "config", value);
      return obj;
    } else {
      return get(this, "config");
    }
  };

  prototype$1.datasets = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "datasets", value);
      return obj;
    } else {
      return get(this, "datasets");
    }
  };

  prototype$1.description = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "description", value);
      return obj;
    } else {
      return get(this, "description");
    }
  };

  prototype$1.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$1.padding = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "padding", value);
      return obj;
    } else {
      return get(this, "padding");
    }
  };

  prototype$1.repeat = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "repeat", value);
      return obj;
    } else {
      return get(this, "repeat");
    }
  };

  prototype$1.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$1.spacing = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spacing", value);
      return obj;
    } else {
      return get(this, "spacing");
    }
  };

  prototype$1.spec = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spec", value);
      return obj;
    } else {
      return get(this, "spec");
    }
  };

  prototype$1.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$1.usermeta = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "usermeta", value);
      return obj;
    } else {
      return get(this, "usermeta");
    }
  };

  prototype$1.data = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      value = isArray(value) ? {values: value} : isString(value) ? {url: value} : value;
      set(obj, "data", value);
      return obj;
    } else {
      return get(this, "data");
    }
  };

  prototype$1.transform = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "transform", value);
      return obj;
    } else {
      return get(this, "transform");
    }
  };

  prototype$1.render = function(...values) {
    return render.apply(this, values);
  };

  prototype$1.toView = function(...values) {
    return toView.apply(this, values);
  };

  prototype$1.toSpec = function(...values) {
    return toSpec.apply(this, values);
  };

  prototype$1.toString = function(...values) {
    return toString.apply(this, values);
  };

  function _repeat(...args) {
    return new __repeat(...args);
  }

  function __facet(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "facet", args[0]);
    if (args[1] !== undefined) set(this, "spec", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2 = proto(__facet);

  prototype$2.align = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "align", value);
      return obj;
    } else {
      return get(this, "align");
    }
  };

  prototype$2.autosize = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "autosize", value);
      return obj;
    } else {
      return get(this, "autosize");
    }
  };

  prototype$2.background = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "background", value);
      return obj;
    } else {
      return get(this, "background");
    }
  };

  prototype$2.bounds = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bounds", value);
      return obj;
    } else {
      return get(this, "bounds");
    }
  };

  prototype$2.center = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "center", value);
      return obj;
    } else {
      return get(this, "center");
    }
  };

  prototype$2.columns = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "columns", value);
      return obj;
    } else {
      return get(this, "columns");
    }
  };

  prototype$2.config = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "config", value);
      return obj;
    } else {
      return get(this, "config");
    }
  };

  prototype$2.datasets = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "datasets", value);
      return obj;
    } else {
      return get(this, "datasets");
    }
  };

  prototype$2.description = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "description", value);
      return obj;
    } else {
      return get(this, "description");
    }
  };

  prototype$2.facet = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "facet", value);
      return obj;
    } else {
      return get(this, "facet");
    }
  };

  prototype$2.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$2.padding = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "padding", value);
      return obj;
    } else {
      return get(this, "padding");
    }
  };

  prototype$2.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$2.spacing = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spacing", value);
      return obj;
    } else {
      return get(this, "spacing");
    }
  };

  prototype$2.spec = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spec", value);
      return obj;
    } else {
      return get(this, "spec");
    }
  };

  prototype$2.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$2.usermeta = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "usermeta", value);
      return obj;
    } else {
      return get(this, "usermeta");
    }
  };

  prototype$2.data = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      value = isArray(value) ? {values: value} : isString(value) ? {url: value} : value;
      set(obj, "data", value);
      return obj;
    } else {
      return get(this, "data");
    }
  };

  prototype$2.transform = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "transform", value);
      return obj;
    } else {
      return get(this, "transform");
    }
  };

  prototype$2.repeat = function(...values) {
    values = values.slice(0, 1);
    const obj = _repeat(...values);
    return obj.spec(this);
  };

  prototype$2.render = function(...values) {
    return render.apply(this, values);
  };

  prototype$2.toView = function(...values) {
    return toView.apply(this, values);
  };

  prototype$2.toSpec = function(...values) {
    return toSpec.apply(this, values);
  };

  prototype$2.toString = function(...values) {
    return toString.apply(this, values);
  };

  function _facet(...args) {
    return new __facet(...args);
  }

  function _mark(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {type: _} : _);
    set(this, "mark", merge(0, get(this, "mark"), args));
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$3 = proto(_mark);

  prototype$3.align = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "align", value);
      return obj;
    } else {
      return get(this, "align");
    }
  };

  prototype$3.autosize = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "autosize", value);
      return obj;
    } else {
      return get(this, "autosize");
    }
  };

  prototype$3.background = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "background", value);
      return obj;
    } else {
      return get(this, "background");
    }
  };

  prototype$3.bounds = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bounds", value);
      return obj;
    } else {
      return get(this, "bounds");
    }
  };

  prototype$3.center = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "center", value);
      return obj;
    } else {
      return get(this, "center");
    }
  };

  prototype$3.columns = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "columns", value);
      return obj;
    } else {
      return get(this, "columns");
    }
  };

  prototype$3.config = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "config", value);
      return obj;
    } else {
      return get(this, "config");
    }
  };

  prototype$3.datasets = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "datasets", value);
      return obj;
    } else {
      return get(this, "datasets");
    }
  };

  prototype$3.description = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "description", value);
      return obj;
    } else {
      return get(this, "description");
    }
  };

  prototype$3.height = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "height", value);
      return obj;
    } else {
      return get(this, "height");
    }
  };

  prototype$3.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$3.padding = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "padding", value);
      return obj;
    } else {
      return get(this, "padding");
    }
  };

  prototype$3.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$3.spacing = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spacing", value);
      return obj;
    } else {
      return get(this, "spacing");
    }
  };

  prototype$3.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$3.usermeta = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "usermeta", value);
      return obj;
    } else {
      return get(this, "usermeta");
    }
  };

  prototype$3.view = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "view", value);
      return obj;
    } else {
      return get(this, "view");
    }
  };

  prototype$3.width = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "width", value);
      return obj;
    } else {
      return get(this, "width");
    }
  };

  prototype$3.mark = function(...values) {
    if (arguments.length) {
      values = values.map(v => isString(v) ? {type: v} : v);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    } else {
      return get(this, "mark");
    }
    };

    prototype$3.encode = function(...values) {
      if (arguments.length) {
        const val = get(this, "encoding");
        const obj = copy(this);
        if (val) values = [val].concat(values);
        set(obj, "encoding", merge(1, values));
        return obj;
    } else {
      return get(this, "encoding");
    }
    };

    prototype$3.select = function(...values) {
      if (arguments.length) {
        const val = get(this, "selection");
        const obj = copy(this);
        if (val) values = [val].concat(values);
        set(obj, "selection", merge(1, values));
        return obj;
    } else {
      return get(this, "selection");
    }
    };

    prototype$3.project = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "projection", value);
        return obj;
      } else {
        return get(this, "projection");
      }
    };

    prototype$3.data = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: value} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    };

    prototype$3.transform = function(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    };

    prototype$3.markArea = function(...values) {
      values = [{"type":"area"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markBar = function(...values) {
      values = [{"type":"bar"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markBoxplot = function(...values) {
      values = [{"type":"boxplot"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markCircle = function(...values) {
      values = [{"type":"circle"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markErrorband = function(...values) {
      values = [{"type":"errorband"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markErrorbar = function(...values) {
      values = [{"type":"errorbar"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markGeoshape = function(...values) {
      values = [{"type":"geoshape"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markLine = function(...values) {
      values = [{"type":"line"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markPoint = function(...values) {
      values = [{"type":"point"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markRect = function(...values) {
      values = [{"type":"rect"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markRule = function(...values) {
      values = [{"type":"rule"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markSquare = function(...values) {
      values = [{"type":"square"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markText = function(...values) {
      values = [{"type":"text"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markTick = function(...values) {
      values = [{"type":"tick"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.markTrail = function(...values) {
      values = [{"type":"trail"}].concat(values);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    };

    prototype$3.facet = function(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    };

    prototype$3.repeat = function(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    };

    prototype$3.render = function(...values) {
      return render.apply(this, values);
    };

    prototype$3.toView = function(...values) {
      return toView.apply(this, values);
    };

    prototype$3.toSpec = function(...values) {
      return toSpec.apply(this, values);
    };

    prototype$3.toString = function(...values) {
      return toString.apply(this, values);
    };

    function mark(...args) {
      return new _mark(...args);
    }

  function markArea(...args) {
    return mark({"type":"area"}, ...args);
  }

  function markBar(...args) {
    return mark({"type":"bar"}, ...args);
  }

  function markBoxplot(...args) {
    return mark({"type":"boxplot"}, ...args);
  }

  function markCircle(...args) {
    return mark({"type":"circle"}, ...args);
  }

  function markErrorband(...args) {
    return mark({"type":"errorband"}, ...args);
  }

  function markErrorbar(...args) {
    return mark({"type":"errorbar"}, ...args);
  }

  function markGeoshape(...args) {
    return mark({"type":"geoshape"}, ...args);
  }

  function markLine(...args) {
    return mark({"type":"line"}, ...args);
  }

  function markPoint(...args) {
    return mark({"type":"point"}, ...args);
  }

  function markRect(...args) {
    return mark({"type":"rect"}, ...args);
  }

  function markRule(...args) {
    return mark({"type":"rule"}, ...args);
  }

  function markSquare(...args) {
    return mark({"type":"square"}, ...args);
  }

  function markText(...args) {
    return mark({"type":"text"}, ...args);
  }

  function markTick(...args) {
    return mark({"type":"tick"}, ...args);
  }

  function markTrail(...args) {
    return mark({"type":"trail"}, ...args);
  }

  function _layer(...args) {
    init(this);
    args = flat(args);
    set(this, "layer", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$4 = proto(_layer);

  prototype$4.autosize = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "autosize", value);
      return obj;
    } else {
      return get(this, "autosize");
    }
  };

  prototype$4.background = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "background", value);
      return obj;
    } else {
      return get(this, "background");
    }
  };

  prototype$4.config = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "config", value);
      return obj;
    } else {
      return get(this, "config");
    }
  };

  prototype$4.datasets = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "datasets", value);
      return obj;
    } else {
      return get(this, "datasets");
    }
  };

  prototype$4.description = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "description", value);
      return obj;
    } else {
      return get(this, "description");
    }
  };

  prototype$4.encoding = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "encoding", value);
      return obj;
    } else {
      return get(this, "encoding");
    }
  };

  prototype$4.height = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "height", value);
      return obj;
    } else {
      return get(this, "height");
    }
  };

  prototype$4.layer = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "layer", value);
      return obj;
    } else {
      return get(this, "layer");
    }
  };

  prototype$4.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$4.padding = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "padding", value);
      return obj;
    } else {
      return get(this, "padding");
    }
  };

  prototype$4.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$4.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$4.usermeta = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "usermeta", value);
      return obj;
    } else {
      return get(this, "usermeta");
    }
  };

  prototype$4.view = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "view", value);
      return obj;
    } else {
      return get(this, "view");
    }
  };

  prototype$4.width = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "width", value);
      return obj;
    } else {
      return get(this, "width");
    }
  };

  prototype$4.project = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "projection", value);
      return obj;
    } else {
      return get(this, "projection");
    }
  };

  prototype$4.data = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      value = isArray(value) ? {values: value} : isString(value) ? {url: value} : value;
      set(obj, "data", value);
      return obj;
    } else {
      return get(this, "data");
    }
  };

  prototype$4.transform = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "transform", value);
      return obj;
    } else {
      return get(this, "transform");
    }
  };

  prototype$4.facet = function(...values) {
    values = values.slice(0, 1);
    const obj = _facet(...values);
    return obj.spec(this);
  };

  prototype$4.repeat = function(...values) {
    values = values.slice(0, 1);
    const obj = _repeat(...values);
    return obj.spec(this);
  };

  prototype$4.render = function(...values) {
    return render.apply(this, values);
  };

  prototype$4.toView = function(...values) {
    return toView.apply(this, values);
  };

  prototype$4.toSpec = function(...values) {
    return toSpec.apply(this, values);
  };

  prototype$4.toString = function(...values) {
    return toString.apply(this, values);
  };

  function layer(...args) {
    return new _layer(...args);
  }

  function _hconcat(...args) {
    init(this);
    args = flat(args);
    set(this, "hconcat", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$5 = proto(_hconcat);

  prototype$5.autosize = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "autosize", value);
      return obj;
    } else {
      return get(this, "autosize");
    }
  };

  prototype$5.background = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "background", value);
      return obj;
    } else {
      return get(this, "background");
    }
  };

  prototype$5.bounds = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bounds", value);
      return obj;
    } else {
      return get(this, "bounds");
    }
  };

  prototype$5.center = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "center", value);
      return obj;
    } else {
      return get(this, "center");
    }
  };

  prototype$5.config = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "config", value);
      return obj;
    } else {
      return get(this, "config");
    }
  };

  prototype$5.datasets = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "datasets", value);
      return obj;
    } else {
      return get(this, "datasets");
    }
  };

  prototype$5.description = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "description", value);
      return obj;
    } else {
      return get(this, "description");
    }
  };

  prototype$5.hconcat = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "hconcat", value);
      return obj;
    } else {
      return get(this, "hconcat");
    }
  };

  prototype$5.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$5.padding = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "padding", value);
      return obj;
    } else {
      return get(this, "padding");
    }
  };

  prototype$5.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$5.spacing = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spacing", value);
      return obj;
    } else {
      return get(this, "spacing");
    }
  };

  prototype$5.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$5.usermeta = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "usermeta", value);
      return obj;
    } else {
      return get(this, "usermeta");
    }
  };

  prototype$5.data = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      value = isArray(value) ? {values: value} : isString(value) ? {url: value} : value;
      set(obj, "data", value);
      return obj;
    } else {
      return get(this, "data");
    }
  };

  prototype$5.transform = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "transform", value);
      return obj;
    } else {
      return get(this, "transform");
    }
  };

  prototype$5.repeat = function(...values) {
    values = values.slice(0, 1);
    const obj = _repeat(...values);
    return obj.spec(this);
  };

  prototype$5.render = function(...values) {
    return render.apply(this, values);
  };

  prototype$5.toView = function(...values) {
    return toView.apply(this, values);
  };

  prototype$5.toSpec = function(...values) {
    return toSpec.apply(this, values);
  };

  prototype$5.toString = function(...values) {
    return toString.apply(this, values);
  };

  function hconcat(...args) {
    return new _hconcat(...args);
  }

  function _vconcat(...args) {
    init(this);
    args = flat(args);
    set(this, "vconcat", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$6 = proto(_vconcat);

  prototype$6.autosize = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "autosize", value);
      return obj;
    } else {
      return get(this, "autosize");
    }
  };

  prototype$6.background = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "background", value);
      return obj;
    } else {
      return get(this, "background");
    }
  };

  prototype$6.bounds = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bounds", value);
      return obj;
    } else {
      return get(this, "bounds");
    }
  };

  prototype$6.center = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "center", value);
      return obj;
    } else {
      return get(this, "center");
    }
  };

  prototype$6.config = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "config", value);
      return obj;
    } else {
      return get(this, "config");
    }
  };

  prototype$6.datasets = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "datasets", value);
      return obj;
    } else {
      return get(this, "datasets");
    }
  };

  prototype$6.description = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "description", value);
      return obj;
    } else {
      return get(this, "description");
    }
  };

  prototype$6.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$6.padding = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "padding", value);
      return obj;
    } else {
      return get(this, "padding");
    }
  };

  prototype$6.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$6.spacing = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spacing", value);
      return obj;
    } else {
      return get(this, "spacing");
    }
  };

  prototype$6.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$6.usermeta = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "usermeta", value);
      return obj;
    } else {
      return get(this, "usermeta");
    }
  };

  prototype$6.vconcat = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "vconcat", value);
      return obj;
    } else {
      return get(this, "vconcat");
    }
  };

  prototype$6.data = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      value = isArray(value) ? {values: value} : isString(value) ? {url: value} : value;
      set(obj, "data", value);
      return obj;
    } else {
      return get(this, "data");
    }
  };

  prototype$6.transform = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "transform", value);
      return obj;
    } else {
      return get(this, "transform");
    }
  };

  prototype$6.repeat = function(...values) {
    values = values.slice(0, 1);
    const obj = _repeat(...values);
    return obj.spec(this);
  };

  prototype$6.render = function(...values) {
    return render.apply(this, values);
  };

  prototype$6.toView = function(...values) {
    return toView.apply(this, values);
  };

  prototype$6.toSpec = function(...values) {
    return toSpec.apply(this, values);
  };

  prototype$6.toString = function(...values) {
    return toString.apply(this, values);
  };

  function vconcat(...args) {
    return new _vconcat(...args);
  }

  function _lookupData(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "data", isArray(args[0]) ? {values: args[0]} : isString(args[0]) ? {url: args[0]} : args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$7 = proto(_lookupData);

  prototype$7.data = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "data", value);
      return obj;
    } else {
      return get(this, "data");
    }
  };

  prototype$7.fields = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "fields", value);
      return obj;
    } else {
      return get(this, "fields");
    }
  };

  prototype$7.key = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "key", value);
      return obj;
    } else {
      return get(this, "key");
    }
  };

  function lookupData(...args) {
    return new _lookupData(...args);
  }

  function _data(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "data", isArray(args[0]) ? {values: args[0]} : isString(args[0]) ? {url: args[0]} : args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$8 = proto(_data);

  prototype$8.align = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "align", value);
      return obj;
    } else {
      return get(this, "align");
    }
  };

  prototype$8.autosize = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "autosize", value);
      return obj;
    } else {
      return get(this, "autosize");
    }
  };

  prototype$8.background = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "background", value);
      return obj;
    } else {
      return get(this, "background");
    }
  };

  prototype$8.bounds = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bounds", value);
      return obj;
    } else {
      return get(this, "bounds");
    }
  };

  prototype$8.center = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "center", value);
      return obj;
    } else {
      return get(this, "center");
    }
  };

  prototype$8.columns = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "columns", value);
      return obj;
    } else {
      return get(this, "columns");
    }
  };

  prototype$8.config = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "config", value);
      return obj;
    } else {
      return get(this, "config");
    }
  };

  prototype$8.datasets = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "datasets", value);
      return obj;
    } else {
      return get(this, "datasets");
    }
  };

  prototype$8.description = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "description", value);
      return obj;
    } else {
      return get(this, "description");
    }
  };

  prototype$8.height = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "height", value);
      return obj;
    } else {
      return get(this, "height");
    }
  };

  prototype$8.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$8.padding = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "padding", value);
      return obj;
    } else {
      return get(this, "padding");
    }
  };

  prototype$8.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$8.spacing = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spacing", value);
      return obj;
    } else {
      return get(this, "spacing");
    }
  };

  prototype$8.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$8.usermeta = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "usermeta", value);
      return obj;
    } else {
      return get(this, "usermeta");
    }
  };

  prototype$8.view = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "view", value);
      return obj;
    } else {
      return get(this, "view");
    }
  };

  prototype$8.width = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "width", value);
      return obj;
    } else {
      return get(this, "width");
    }
  };

  prototype$8.mark = function(...values) {
    if (arguments.length) {
      values = values.map(v => isString(v) ? {type: v} : v);
      const obj = copy(this);
      set(obj, "mark", merge(0, values));
      return obj;
    } else {
      return get(this, "mark");
    }
    };

    prototype$8.encode = function(...values) {
      if (arguments.length) {
        const val = get(this, "encoding");
        const obj = copy(this);
        if (val) values = [val].concat(values);
        set(obj, "encoding", merge(1, values));
        return obj;
    } else {
      return get(this, "encoding");
    }
    };

    prototype$8.select = function(...values) {
      if (arguments.length) {
        const val = get(this, "selection");
        const obj = copy(this);
        if (val) values = [val].concat(values);
        set(obj, "selection", merge(1, values));
        return obj;
    } else {
      return get(this, "selection");
    }
    };

    prototype$8.project = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "projection", value);
        return obj;
      } else {
        return get(this, "projection");
      }
    };

    prototype$8.data = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        value = isArray(value) ? {values: value} : isString(value) ? {url: value} : value;
        set(obj, "data", value);
        return obj;
      } else {
        return get(this, "data");
      }
    };

    prototype$8.transform = function(...value) {
      if (arguments.length) {
        const obj = copy(this);
        value = flat(value);
        set(obj, "transform", value);
        return obj;
      } else {
        return get(this, "transform");
      }
    };

    prototype$8.fields = function(...values) {
      let obj = lookupData();
      obj = assign(obj, this);
      return obj.fields(...values);
    };

    prototype$8.key = function(...values) {
      let obj = lookupData();
      obj = assign(obj, this);
      return obj.key(...values);
    };

    prototype$8.mark = function(...values) {
      const obj = mark(...values);
      return assign(obj, this);
    };

    prototype$8.layer = function(...values) {
      const obj = layer(...values);
      return assign(obj, this);
    };

    prototype$8.hconcat = function(...values) {
      const obj = hconcat(...values);
      return assign(obj, this);
    };

    prototype$8.vconcat = function(...values) {
      const obj = vconcat(...values);
      return assign(obj, this);
    };

    prototype$8.facet = function(...values) {
      values = values.slice(0, 1);
      const obj = _facet(...values);
      return obj.spec(this);
    };

    prototype$8.repeat = function(...values) {
      values = values.slice(0, 1);
      const obj = _repeat(...values);
      return obj.spec(this);
    };

    prototype$8.render = function(...values) {
      return render.apply(this, values);
    };

    prototype$8.toView = function(...values) {
      return toView.apply(this, values);
    };

    prototype$8.toSpec = function(...values) {
      return toSpec.apply(this, values);
    };

    prototype$8.toString = function(...values) {
      return toString.apply(this, values);
    };

    function data(...args) {
      return new _data(...args);
    }

  function _url(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "url", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$9 = proto(_url);

  prototype$9.format = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "format", value);
      return obj;
    } else {
      return get(this, "format");
    }
  };

  prototype$9.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$9.url = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "url", value);
      return obj;
    } else {
      return get(this, "url");
    }
  };

  function url(...args) {
    return new _url(...args);
  }

  function _values(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "values", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$a = proto(_values);

  prototype$a.format = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "format", value);
      return obj;
    } else {
      return get(this, "format");
    }
  };

  prototype$a.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$a.values = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "values", value);
      return obj;
    } else {
      return get(this, "values");
    }
  };

  function values(...args) {
    return new _values(...args);
  }

  function _sequence(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "start", args[0]);
    if (args[1] !== undefined) set(this, "stop", args[1]);
    if (args[2] !== undefined) set(this, "step", args[2]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$b = proto(_sequence);

  prototype$b.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$b.start = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "start", value);
      return obj;
    } else {
      return get(this, "start");
    }
  };

  prototype$b.step = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "step", value);
      return obj;
    } else {
      return get(this, "step");
    }
  };

  prototype$b.stop = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "stop", value);
      return obj;
    } else {
      return get(this, "stop");
    }
  };

  prototype$b.toJSON = function() {
    return {sequence: proto().toJSON.call(this)};
  };

  function sequence(...args) {
    return new _sequence(...args);
  }

  function _sphere(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$c = proto(_sphere);

  prototype$c.toJSON = function() {
    return {sphere: proto().toJSON.call(this)};
  };

  function sphere(...args) {
    return new _sphere(...args);
  }

  function _graticule(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$d = proto(_graticule);

  prototype$d.extent = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "extent", value);
      return obj;
    } else {
      return get(this, "extent");
    }
  };

  prototype$d.extentMajor = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "extentMajor", value);
      return obj;
    } else {
      return get(this, "extentMajor");
    }
  };

  prototype$d.extentMinor = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "extentMinor", value);
      return obj;
    } else {
      return get(this, "extentMinor");
    }
  };

  prototype$d.precision = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "precision", value);
      return obj;
    } else {
      return get(this, "precision");
    }
  };

  prototype$d.step = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "step", value);
      return obj;
    } else {
      return get(this, "step");
    }
  };

  prototype$d.stepMajor = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "stepMajor", value);
      return obj;
    } else {
      return get(this, "stepMajor");
    }
  };

  prototype$d.stepMinor = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "stepMinor", value);
      return obj;
    } else {
      return get(this, "stepMinor");
    }
  };

  prototype$d.toJSON = function() {
    return {graticule: proto().toJSON.call(this)};
  };

  function graticule(...args) {
    return new _graticule(...args);
  }

  function _csv(...args) {
    init(this);
    set(this, "type", "csv");
    args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: _} : isString(_) ? {url: _} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$e = proto(_csv);

  prototype$e.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$e.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$e.url = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "url", value);
      return obj;
    } else {
      return get(this, "url");
    }
  };

  prototype$e.values = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "values", value);
      return obj;
    } else {
      return get(this, "values");
    }
  };

  prototype$e.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$e.toJSON = function() {
    return nest(proto().toJSON.call(this), ["url","values","name"], "format");
  };

  function csv(...args) {
    return new _csv(...args);
  }

  function _dsv(...args) {
    init(this);
    set(this, "type", "dsv");
    args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: _} : isString(_) ? {url: _} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$f = proto(_dsv);

  prototype$f.delimiter = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "delimiter", value);
      return obj;
    } else {
      return get(this, "delimiter");
    }
  };

  prototype$f.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$f.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$f.url = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "url", value);
      return obj;
    } else {
      return get(this, "url");
    }
  };

  prototype$f.values = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "values", value);
      return obj;
    } else {
      return get(this, "values");
    }
  };

  prototype$f.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$f.toJSON = function() {
    return nest(proto().toJSON.call(this), ["url","values","name"], "format");
  };

  function dsv(...args) {
    return new _dsv(...args);
  }

  function _json(...args) {
    init(this);
    set(this, "type", "json");
    args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: _} : isString(_) ? {url: _} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$g = proto(_json);

  prototype$g.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$g.property = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "property", value);
      return obj;
    } else {
      return get(this, "property");
    }
  };

  prototype$g.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$g.url = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "url", value);
      return obj;
    } else {
      return get(this, "url");
    }
  };

  prototype$g.values = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "values", value);
      return obj;
    } else {
      return get(this, "values");
    }
  };

  prototype$g.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$g.toJSON = function() {
    return nest(proto().toJSON.call(this), ["url","values","name"], "format");
  };

  function json(...args) {
    return new _json(...args);
  }

  function _topojson(...args) {
    init(this);
    set(this, "type", "topojson");
    args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: _} : isString(_) ? {url: _} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$h = proto(_topojson);

  prototype$h.feature = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "feature", value);
      return obj;
    } else {
      return get(this, "feature");
    }
  };

  prototype$h.mesh = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "mesh", value);
      return obj;
    } else {
      return get(this, "mesh");
    }
  };

  prototype$h.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$h.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$h.url = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "url", value);
      return obj;
    } else {
      return get(this, "url");
    }
  };

  prototype$h.values = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "values", value);
      return obj;
    } else {
      return get(this, "values");
    }
  };

  prototype$h.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$h.toJSON = function() {
    return nest(proto().toJSON.call(this), ["url","values","name"], "format");
  };

  function topojson(...args) {
    return new _topojson(...args);
  }

  function _tsv(...args) {
    init(this);
    set(this, "type", "tsv");
    args = args.map(_ => isObject(_) ? {values: _} : isArray(_) ? {values: _} : isString(_) ? {url: _} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$i = proto(_tsv);

  prototype$i.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$i.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$i.url = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "url", value);
      return obj;
    } else {
      return get(this, "url");
    }
  };

  prototype$i.values = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "values", value);
      return obj;
    } else {
      return get(this, "values");
    }
  };

  prototype$i.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$i.toJSON = function() {
    return nest(proto().toJSON.call(this), ["url","values","name"], "format");
  };

  function tsv(...args) {
    return new _tsv(...args);
  }

  function _csvFormat(...args) {
    init(this);
    set(this, "type", "csv");
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$j = proto(_csvFormat);

  prototype$j.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$j.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function csvFormat(...args) {
    return new _csvFormat(...args);
  }

  function _dsvFormat(...args) {
    init(this);
    set(this, "type", "dsv");
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$k = proto(_dsvFormat);

  prototype$k.delimiter = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "delimiter", value);
      return obj;
    } else {
      return get(this, "delimiter");
    }
  };

  prototype$k.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$k.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function dsvFormat(...args) {
    return new _dsvFormat(...args);
  }

  function _jsonFormat(...args) {
    init(this);
    set(this, "type", "json");
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$l = proto(_jsonFormat);

  prototype$l.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$l.property = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "property", value);
      return obj;
    } else {
      return get(this, "property");
    }
  };

  prototype$l.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function jsonFormat(...args) {
    return new _jsonFormat(...args);
  }

  function _topojsonFormat(...args) {
    init(this);
    set(this, "type", "topojson");
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$m = proto(_topojsonFormat);

  prototype$m.feature = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "feature", value);
      return obj;
    } else {
      return get(this, "feature");
    }
  };

  prototype$m.mesh = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "mesh", value);
      return obj;
    } else {
      return get(this, "mesh");
    }
  };

  prototype$m.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$m.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function topojsonFormat(...args) {
    return new _topojsonFormat(...args);
  }

  function _tsvFormat(...args) {
    init(this);
    set(this, "type", "tsv");
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$n = proto(_tsvFormat);

  prototype$n.parse = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parse", value);
      return obj;
    } else {
      return get(this, "parse");
    }
  };

  prototype$n.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function tsvFormat(...args) {
    return new _tsvFormat(...args);
  }

  function _color(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$o = proto(_color);

  prototype$o.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$o.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$o.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$o.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$o.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$o.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$o.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$o.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$o.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$o.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$o.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$o.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$o.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$o.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$o.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$o.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$o.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$o.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$o.toJSON = function(flag) {
      return flag ? {color: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function color(...args) {
      return new _color(...args);
    }

  function _column(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "ordinal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$p = proto(_column);

  prototype$p.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$p.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$p.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$p.header = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "header", value);
      return obj;
    } else {
      return get(this, "header");
    }
  };

  prototype$p.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$p.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$p.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$p.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$p.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$p.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$p.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$p.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$p.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$p.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$p.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$p.toJSON = function(flag) {
      return flag ? {column: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function column(...args) {
      return new _column(...args);
    }

  function _detail(...args) {
    init(this);
    args = args.map(_ => isArray(_) ? _.map(_ => { return isString(_) ? {field: _, type: "nominal"} : _; }) : isString(_) ? {field: _, type: "nominal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$q = proto(_detail);

  prototype$q.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$q.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$q.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$q.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$q.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$q.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$q.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$q.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$q.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$q.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$q.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$q.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$q.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$q.toJSON = function(flag) {
      return flag ? {detail: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function detail(...args) {
      return new _detail(...args);
    }

  function _facet$1(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "ordinal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$r = proto(_facet$1);

  prototype$r.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$r.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$r.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$r.header = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "header", value);
      return obj;
    } else {
      return get(this, "header");
    }
  };

  prototype$r.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$r.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$r.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$r.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$r.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$r.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$r.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$r.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$r.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$r.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$r.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$r.toJSON = function(flag) {
      return flag ? {facet: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function facet(...args) {
      return new _facet$1(...args);
    }

  function _fill(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$s = proto(_fill);

  prototype$s.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$s.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$s.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$s.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$s.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$s.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$s.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$s.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$s.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$s.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$s.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$s.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$s.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$s.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$s.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$s.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$s.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$s.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$s.toJSON = function(flag) {
      return flag ? {fill: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function fill(...args) {
      return new _fill(...args);
    }

  function _fillOpacity(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$t = proto(_fillOpacity);

  prototype$t.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$t.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$t.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$t.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$t.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$t.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$t.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$t.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$t.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$t.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$t.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$t.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$t.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$t.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$t.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$t.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$t.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$t.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$t.toJSON = function(flag) {
      return flag ? {fillOpacity: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function fillOpacity(...args) {
      return new _fillOpacity(...args);
    }

  function _href(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "nominal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$u = proto(_href);

  prototype$u.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$u.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$u.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$u.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$u.format = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "format", value);
      return obj;
    } else {
      return get(this, "format");
    }
  };

  prototype$u.formatType = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "formatType", value);
      return obj;
    } else {
      return get(this, "formatType");
    }
  };

  prototype$u.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$u.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$u.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$u.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$u.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$u.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$u.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$u.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$u.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$u.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$u.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$u.toJSON = function(flag) {
      return flag ? {href: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function href(...args) {
      return new _href(...args);
    }

  function _key(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "nominal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$v = proto(_key);

  prototype$v.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$v.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$v.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$v.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$v.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$v.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$v.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$v.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$v.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$v.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$v.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$v.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$v.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$v.toJSON = function(flag) {
      return flag ? {key: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function key(...args) {
      return new _key(...args);
    }

  function _latitude(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "quantitative"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$w = proto(_latitude);

  prototype$w.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$w.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$w.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$w.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$w.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$w.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$w.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$w.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$w.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$w.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$w.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$w.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$w.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$w.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$w.toJSON = function(flag) {
      return flag ? {latitude: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function latitude(...args) {
      return new _latitude(...args);
    }

  function _latitude2(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "quantitative"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$x = proto(_latitude2);

  prototype$x.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$x.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$x.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$x.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$x.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$x.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$x.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$x.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$x.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$x.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$x.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$x.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$x.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$x.toJSON = function(flag) {
      return flag ? {latitude2: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function latitude2(...args) {
      return new _latitude2(...args);
    }

  function _longitude(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "quantitative"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$y = proto(_longitude);

  prototype$y.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$y.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$y.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$y.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$y.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$y.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$y.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$y.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$y.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$y.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$y.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$y.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$y.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$y.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$y.toJSON = function(flag) {
      return flag ? {longitude: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function longitude(...args) {
      return new _longitude(...args);
    }

  function _longitude2(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "quantitative"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$z = proto(_longitude2);

  prototype$z.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$z.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$z.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$z.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$z.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$z.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$z.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$z.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$z.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$z.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$z.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$z.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$z.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$z.toJSON = function(flag) {
      return flag ? {longitude2: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function longitude2(...args) {
      return new _longitude2(...args);
    }

  function _opacity(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$A = proto(_opacity);

  prototype$A.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$A.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$A.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$A.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$A.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$A.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$A.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$A.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$A.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$A.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$A.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$A.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$A.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$A.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$A.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$A.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$A.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$A.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$A.toJSON = function(flag) {
      return flag ? {opacity: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function opacity(...args) {
      return new _opacity(...args);
    }

  function _order(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "ordinal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$B = proto(_order);

  prototype$B.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$B.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$B.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$B.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$B.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$B.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$B.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$B.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$B.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$B.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$B.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$B.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$B.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$B.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$B.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$B.toJSON = function(flag) {
      return flag ? {order: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function order(...args) {
      return new _order(...args);
    }

  function _row(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "ordinal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$C = proto(_row);

  prototype$C.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$C.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$C.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$C.header = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "header", value);
      return obj;
    } else {
      return get(this, "header");
    }
  };

  prototype$C.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$C.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$C.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$C.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$C.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$C.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$C.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$C.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$C.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$C.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$C.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$C.toJSON = function(flag) {
      return flag ? {row: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function row(...args) {
      return new _row(...args);
    }

  function _shape(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "nominal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$D = proto(_shape);

  prototype$D.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$D.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$D.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$D.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$D.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$D.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$D.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$D.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$D.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$D.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$D.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$D.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$D.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$D.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$D.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$D.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$D.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$D.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$D.toJSON = function(flag) {
      return flag ? {shape: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function shape(...args) {
      return new _shape(...args);
    }

  function _size(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$E = proto(_size);

  prototype$E.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$E.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$E.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$E.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$E.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$E.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$E.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$E.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$E.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$E.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$E.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$E.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$E.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$E.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$E.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$E.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$E.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$E.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$E.toJSON = function(flag) {
      return flag ? {size: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function size(...args) {
      return new _size(...args);
    }

  function _stroke(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$F = proto(_stroke);

  prototype$F.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$F.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$F.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$F.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$F.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$F.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$F.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$F.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$F.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$F.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$F.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$F.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$F.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$F.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$F.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$F.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$F.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$F.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$F.toJSON = function(flag) {
      return flag ? {stroke: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function stroke(...args) {
      return new _stroke(...args);
    }

  function _strokeOpacity(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$G = proto(_strokeOpacity);

  prototype$G.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$G.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$G.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$G.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$G.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$G.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$G.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$G.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$G.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$G.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$G.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$G.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$G.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$G.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$G.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$G.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$G.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$G.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$G.toJSON = function(flag) {
      return flag ? {strokeOpacity: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function strokeOpacity(...args) {
      return new _strokeOpacity(...args);
    }

  function _strokeWidth(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$H = proto(_strokeWidth);

  prototype$H.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$H.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$H.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$H.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$H.legend = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "legend", value);
      return obj;
    } else {
      return get(this, "legend");
    }
  };

  prototype$H.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$H.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$H.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$H.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$H.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$H.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$H.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$H.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$H.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$H.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$H.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$H.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$H.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$H.toJSON = function(flag) {
      return flag ? {strokeWidth: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function strokeWidth(...args) {
      return new _strokeWidth(...args);
    }

  function _text(...args) {
    init(this);
    args = args.map(_ => isString(_) ? {field: _, type: "nominal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$I = proto(_text);

  prototype$I.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$I.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$I.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$I.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$I.format = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "format", value);
      return obj;
    } else {
      return get(this, "format");
    }
  };

  prototype$I.formatType = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "formatType", value);
      return obj;
    } else {
      return get(this, "formatType");
    }
  };

  prototype$I.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$I.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$I.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$I.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$I.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$I.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$I.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$I.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$I.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$I.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$I.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$I.toJSON = function(flag) {
      return flag ? {text: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function text(...args) {
      return new _text(...args);
    }

  function _tooltip(...args) {
    init(this);
    args = args.map(_ => isArray(_) ? _.map(_ => { return isString(_) ? {field: _, type: "nominal"} : _; }) : isString(_) ? {field: _, type: "nominal"} : _);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$J = proto(_tooltip);

  prototype$J.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$J.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$J.condition = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "condition", value);
      return obj;
    } else {
      return get(this, "condition");
    }
  };

  prototype$J.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$J.format = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "format", value);
      return obj;
    } else {
      return get(this, "format");
    }
  };

  prototype$J.formatType = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "formatType", value);
      return obj;
    } else {
      return get(this, "formatType");
    }
  };

  prototype$J.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$J.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$J.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$J.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$J.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$J.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$J.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$J.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$J.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$J.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$J.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$J.toJSON = function(flag) {
      return flag ? {tooltip: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function tooltip(...args) {
      return new _tooltip(...args);
    }

  function _x(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$K = proto(_x);

  prototype$K.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$K.axis = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "axis", value);
      return obj;
    } else {
      return get(this, "axis");
    }
  };

  prototype$K.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$K.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$K.impute = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "impute", value);
      return obj;
    } else {
      return get(this, "impute");
    }
  };

  prototype$K.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$K.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$K.stack = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "stack", value);
      return obj;
    } else {
      return get(this, "stack");
    }
  };

  prototype$K.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$K.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$K.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$K.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$K.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$K.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$K.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$K.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$K.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$K.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$K.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$K.toJSON = function(flag) {
      return flag ? {x: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function x(...args) {
      return new _x(...args);
    }

  function _x2(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$L = proto(_x2);

  prototype$L.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$L.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$L.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$L.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$L.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$L.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$L.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$L.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$L.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$L.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$L.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$L.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$L.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$L.toJSON = function(flag) {
      return flag ? {x2: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function x2(...args) {
      return new _x2(...args);
    }

  function _xError(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$M = proto(_xError);

  prototype$M.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$M.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$M.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$M.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$M.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$M.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$M.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$M.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$M.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$M.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$M.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$M.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$M.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$M.toJSON = function(flag) {
      return flag ? {xError: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function xError(...args) {
      return new _xError(...args);
    }

  function _xError2(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$N = proto(_xError2);

  prototype$N.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$N.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$N.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$N.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$N.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$N.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$N.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$N.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$N.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$N.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$N.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$N.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$N.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$N.toJSON = function(flag) {
      return flag ? {xError2: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function xError2(...args) {
      return new _xError2(...args);
    }

  function _y(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$O = proto(_y);

  prototype$O.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$O.axis = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "axis", value);
      return obj;
    } else {
      return get(this, "axis");
    }
  };

  prototype$O.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$O.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$O.impute = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "impute", value);
      return obj;
    } else {
      return get(this, "impute");
    }
  };

  prototype$O.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$O.sort = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$O.stack = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "stack", value);
      return obj;
    } else {
      return get(this, "stack");
    }
  };

  prototype$O.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$O.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$O.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$O.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$O.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$O.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$O.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$O.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$O.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$O.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$O.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$O.toJSON = function(flag) {
      return flag ? {y: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function y(...args) {
      return new _y(...args);
    }

  function _y2(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$P = proto(_y2);

  prototype$P.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$P.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$P.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$P.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$P.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$P.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$P.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$P.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$P.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$P.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$P.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$P.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$P.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$P.toJSON = function(flag) {
      return flag ? {y2: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function y2(...args) {
      return new _y2(...args);
    }

  function _yError(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$Q = proto(_yError);

  prototype$Q.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$Q.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$Q.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$Q.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$Q.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$Q.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$Q.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$Q.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$Q.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$Q.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$Q.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$Q.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$Q.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$Q.toJSON = function(flag) {
      return flag ? {yError: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function yError(...args) {
      return new _yError(...args);
    }

  function _yError2(...args) {
    init(this);
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$R = proto(_yError2);

  prototype$R.aggregate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$R.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$R.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$R.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$R.title = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "title", value);
      return obj;
    } else {
      return get(this, "title");
    }
  };

  prototype$R.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  prototype$R.fieldN = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "nominal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$R.fieldO = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "ordinal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$R.fieldQ = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "quantitative");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$R.fieldT = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      set(obj, "type", "temporal");
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$R.if = function(...values) {
    if (arguments.length) {
      const val = get(this, "condition") || [];
      const obj = copy(this);
      values = [].concat(val, merge(0, values));
      set(obj, "condition", values.length > 1 ? values : values[0]);
      return obj;
    } else {
      return get(this, "condition");
    }
    };

    prototype$R.count = function() {
      const obj = copy(this);
      set(obj, "type", "quantitative");
      set(obj, "aggregate", "count");
      return obj;
    };

    prototype$R.valid = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "valid");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.missing = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "missing");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.distinct = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "distinct");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.sum = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "sum");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.mean = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "mean");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.average = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "average");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.variance = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variance");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.variancep = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "variancep");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.stdev = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdev");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.stdevp = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stdevp");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.stderr = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "stderr");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.median = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "median");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.q1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.q3 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "q3");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.ci0 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci0");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.ci1 = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "ci1");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.min = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "min");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.max = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "max");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.argmin = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmin");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.argmax = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "quantitative");
        set(obj, "aggregate", "argmax");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.year = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "year");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.quarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.month = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "month");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.day = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "day");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.date = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "date");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.hours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.minutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.seconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "seconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.milliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "milliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.yearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "yearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "quartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "monthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "hoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "minutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.timeSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "secondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcyear = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyear");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcquarter = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcday = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcday");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcdate = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utchours = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcminutes = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcmilliseconds = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcyearmonth = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcYQ = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquarter");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcYQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcYM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcYMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcYMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcYMDHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcYMDHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcyearmonthdatehoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcQM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcquartermonth");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcMD = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdate");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcMDH = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcmonthdatehours");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcHM = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutes");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcHMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utchoursminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcminutesseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.utcSMS = function(value) {
      if (arguments.length) {
        const obj = copy(this);
        set(obj, "field", value);
        set(obj, "type", "temporal");
        set(obj, "timeUnit", "utcsecondsmilliseconds");
        return obj;
      } else {
        return get(this, "field");
      }
    };

    prototype$R.toJSON = function(flag) {
      return flag ? {yError2: proto().toJSON.call(this)} : proto().toJSON.call(this);
    };

    function yError2(...args) {
      return new _yError2(...args);
    }

  function _field(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "field", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$S = proto(_field);

  prototype$S.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  prototype$S.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$S.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$S.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$S.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$S.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$S.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$S.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$S.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$S.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function field(...args) {
    return new _field(...args);
  }

  function fieldN(...args) {
    const obj = field(...args);
    set(obj, "type", "nominal");
    return obj;
  }

  function fieldO(...args) {
    const obj = field(...args);
    set(obj, "type", "ordinal");
    return obj;
  }

  function fieldQ(...args) {
    const obj = field(...args);
    set(obj, "type", "quantitative");
    return obj;
  }

  function fieldT(...args) {
    const obj = field(...args);
    set(obj, "type", "temporal");
    return obj;
  }

  function _encoding(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "encoding", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$T = proto(_encoding);

  prototype$T.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "encoding", value);
      return obj;
    } else {
      return get(this, "encoding");
    }
  };

  function encoding(...args) {
    return new _encoding(...args);
  }

  function _repeat$1(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "repeat", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$U = proto(_repeat$1);

  prototype$U.repeat = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "repeat", value);
      return obj;
    } else {
      return get(this, "repeat");
    }
  };

  function repeat(...args) {
    return new _repeat$1(...args);
  }

  function _value(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "value", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$V = proto(_value);

  function value(...args) {
    return new _value(...args);
  }

  function _projection(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "type", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$W = proto(_projection);

  prototype$W.center = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "center", value);
      return obj;
    } else {
      return get(this, "center");
    }
  };

  prototype$W.clipAngle = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "clipAngle", value);
      return obj;
    } else {
      return get(this, "clipAngle");
    }
  };

  prototype$W.clipExtent = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "clipExtent", value);
      return obj;
    } else {
      return get(this, "clipExtent");
    }
  };

  prototype$W.coefficient = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "coefficient", value);
      return obj;
    } else {
      return get(this, "coefficient");
    }
  };

  prototype$W.distance = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "distance", value);
      return obj;
    } else {
      return get(this, "distance");
    }
  };

  prototype$W.fraction = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "fraction", value);
      return obj;
    } else {
      return get(this, "fraction");
    }
  };

  prototype$W.lobes = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lobes", value);
      return obj;
    } else {
      return get(this, "lobes");
    }
  };

  prototype$W.parallel = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "parallel", value);
      return obj;
    } else {
      return get(this, "parallel");
    }
  };

  prototype$W.precision = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "precision", value);
      return obj;
    } else {
      return get(this, "precision");
    }
  };

  prototype$W.radius = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "radius", value);
      return obj;
    } else {
      return get(this, "radius");
    }
  };

  prototype$W.ratio = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "ratio", value);
      return obj;
    } else {
      return get(this, "ratio");
    }
  };

  prototype$W.reflectX = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "reflectX", value);
      return obj;
    } else {
      return get(this, "reflectX");
    }
  };

  prototype$W.reflectY = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "reflectY", value);
      return obj;
    } else {
      return get(this, "reflectY");
    }
  };

  prototype$W.rotate = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "rotate", value);
      return obj;
    } else {
      return get(this, "rotate");
    }
  };

  prototype$W.scale = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "scale", value);
      return obj;
    } else {
      return get(this, "scale");
    }
  };

  prototype$W.spacing = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "spacing", value);
      return obj;
    } else {
      return get(this, "spacing");
    }
  };

  prototype$W.tilt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "tilt", value);
      return obj;
    } else {
      return get(this, "tilt");
    }
  };

  prototype$W.translate = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "translate", value);
      return obj;
    } else {
      return get(this, "translate");
    }
  };

  prototype$W.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function projection(...args) {
    return new _projection(...args);
  }

  function _selectInterval(...args) {
    init(this);
    set(this, "type", "interval");
    this["_sel"] = args[0] !== undefined ? args[0] : id("sel");
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$X = proto(_selectInterval);

  prototype$X.bind = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bind", value);
      return obj;
    } else {
      return get(this, "bind");
    }
  };

  prototype$X.clear = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "clear", value);
      return obj;
    } else {
      return get(this, "clear");
    }
  };

  prototype$X.empty = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "empty", value);
      return obj;
    } else {
      return get(this, "empty");
    }
  };

  prototype$X.encodings = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "encodings", value);
      return obj;
    } else {
      return get(this, "encodings");
    }
  };

  prototype$X.fields = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "fields", value);
      return obj;
    } else {
      return get(this, "fields");
    }
  };

  prototype$X.init = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "init", value);
      return obj;
    } else {
      return get(this, "init");
    }
  };

  prototype$X.mark = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "mark", value);
      return obj;
    } else {
      return get(this, "mark");
    }
  };

  prototype$X.on = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "on", value);
      return obj;
    } else {
      return get(this, "on");
    }
  };

  prototype$X.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$X.translate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "translate", value);
      return obj;
    } else {
      return get(this, "translate");
    }
  };

  prototype$X.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$X.zoom = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "zoom", value);
      return obj;
    } else {
      return get(this, "zoom");
    }
  };

  prototype$X.toJSON = function(flag) {
    return flag ? {[this["_sel"]]: proto().toJSON.call(this)} : {selection: this["_sel"]};
  };

  function selectInterval(...args) {
    return new _selectInterval(...args);
  }

  function _selectMulti(...args) {
    init(this);
    set(this, "type", "multi");
    this["_sel"] = args[0] !== undefined ? args[0] : id("sel");
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$Y = proto(_selectMulti);

  prototype$Y.clear = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "clear", value);
      return obj;
    } else {
      return get(this, "clear");
    }
  };

  prototype$Y.empty = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "empty", value);
      return obj;
    } else {
      return get(this, "empty");
    }
  };

  prototype$Y.encodings = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "encodings", value);
      return obj;
    } else {
      return get(this, "encodings");
    }
  };

  prototype$Y.fields = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "fields", value);
      return obj;
    } else {
      return get(this, "fields");
    }
  };

  prototype$Y.init = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "init", value);
      return obj;
    } else {
      return get(this, "init");
    }
  };

  prototype$Y.nearest = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "nearest", value);
      return obj;
    } else {
      return get(this, "nearest");
    }
  };

  prototype$Y.on = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "on", value);
      return obj;
    } else {
      return get(this, "on");
    }
  };

  prototype$Y.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$Y.toggle = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "toggle", value);
      return obj;
    } else {
      return get(this, "toggle");
    }
  };

  prototype$Y.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$Y.toJSON = function(flag) {
    return flag ? {[this["_sel"]]: proto().toJSON.call(this)} : {selection: this["_sel"]};
  };

  function selectMulti(...args) {
    return new _selectMulti(...args);
  }

  function _selectSingle(...args) {
    init(this);
    set(this, "type", "single");
    this["_sel"] = args[0] !== undefined ? args[0] : id("sel");
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$Z = proto(_selectSingle);

  prototype$Z.bind = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bind", value);
      return obj;
    } else {
      return get(this, "bind");
    }
  };

  prototype$Z.clear = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "clear", value);
      return obj;
    } else {
      return get(this, "clear");
    }
  };

  prototype$Z.empty = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "empty", value);
      return obj;
    } else {
      return get(this, "empty");
    }
  };

  prototype$Z.encodings = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "encodings", value);
      return obj;
    } else {
      return get(this, "encodings");
    }
  };

  prototype$Z.fields = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "fields", value);
      return obj;
    } else {
      return get(this, "fields");
    }
  };

  prototype$Z.init = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "init", value);
      return obj;
    } else {
      return get(this, "init");
    }
  };

  prototype$Z.nearest = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "nearest", value);
      return obj;
    } else {
      return get(this, "nearest");
    }
  };

  prototype$Z.on = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "on", value);
      return obj;
    } else {
      return get(this, "on");
    }
  };

  prototype$Z.resolve = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "resolve", value);
      return obj;
    } else {
      return get(this, "resolve");
    }
  };

  prototype$Z.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  prototype$Z.toJSON = function(flag) {
    return flag ? {[this["_sel"]]: proto().toJSON.call(this)} : {selection: this["_sel"]};
  };

  function selectSingle(...args) {
    return new _selectSingle(...args);
  }

  function _checkbox(...args) {
    init(this);
    set(this, "input", "checkbox");
    assign(this, ...args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$_ = proto(_checkbox);

  prototype$_.debounce = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "debounce", value);
      return obj;
    } else {
      return get(this, "debounce");
    }
  };

  prototype$_.element = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "element", value);
      return obj;
    } else {
      return get(this, "element");
    }
  };

  prototype$_.input = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "input", value);
      return obj;
    } else {
      return get(this, "input");
    }
  };

  prototype$_.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$_.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function checkbox(...args) {
    return new _checkbox(...args);
  }

  function _menu(...args) {
    init(this);
    set(this, "input", "select");
    args = flat(args);
    set(this, "options", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$$ = proto(_menu);

  prototype$$.debounce = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "debounce", value);
      return obj;
    } else {
      return get(this, "debounce");
    }
  };

  prototype$$.element = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "element", value);
      return obj;
    } else {
      return get(this, "element");
    }
  };

  prototype$$.input = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "input", value);
      return obj;
    } else {
      return get(this, "input");
    }
  };

  prototype$$.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$$.options = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "options", value);
      return obj;
    } else {
      return get(this, "options");
    }
  };

  prototype$$.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function menu(...args) {
    return new _menu(...args);
  }

  function _radio(...args) {
    init(this);
    set(this, "input", "radio");
    args = flat(args);
    set(this, "options", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$10 = proto(_radio);

  prototype$10.debounce = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "debounce", value);
      return obj;
    } else {
      return get(this, "debounce");
    }
  };

  prototype$10.element = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "element", value);
      return obj;
    } else {
      return get(this, "element");
    }
  };

  prototype$10.input = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "input", value);
      return obj;
    } else {
      return get(this, "input");
    }
  };

  prototype$10.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$10.options = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "options", value);
      return obj;
    } else {
      return get(this, "options");
    }
  };

  prototype$10.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function radio(...args) {
    return new _radio(...args);
  }

  function _slider(...args) {
    init(this);
    set(this, "input", "range");
    if (args[0] !== undefined) set(this, "min", args[0]);
    if (args[1] !== undefined) set(this, "max", args[1]);
    if (args[2] !== undefined) set(this, "step", args[2]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$11 = proto(_slider);

  prototype$11.debounce = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "debounce", value);
      return obj;
    } else {
      return get(this, "debounce");
    }
  };

  prototype$11.element = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "element", value);
      return obj;
    } else {
      return get(this, "element");
    }
  };

  prototype$11.input = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "input", value);
      return obj;
    } else {
      return get(this, "input");
    }
  };

  prototype$11.max = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "max", value);
      return obj;
    } else {
      return get(this, "max");
    }
  };

  prototype$11.min = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "min", value);
      return obj;
    } else {
      return get(this, "min");
    }
  };

  prototype$11.name = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "name", value);
      return obj;
    } else {
      return get(this, "name");
    }
  };

  prototype$11.step = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "step", value);
      return obj;
    } else {
      return get(this, "step");
    }
  };

  prototype$11.type = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "type", value);
      return obj;
    } else {
      return get(this, "type");
    }
  };

  function slider(...args) {
    return new _slider(...args);
  }

  function _not(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "not", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$12 = proto(_not);

  function not(...args) {
    return new _not(...args);
  }

  function _and(...args) {
    init(this);
    args = flat(args);
    set(this, "and", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$13 = proto(_and);

  function and(...args) {
    return new _and(...args);
  }

  function _or(...args) {
    init(this);
    args = flat(args);
    set(this, "or", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$14 = proto(_or);

  function or(...args) {
    return new _or(...args);
  }

  function _aggregate(...args) {
    init(this);
    args = flat(args);
    set(this, "aggregate", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$15 = proto(_aggregate);

  prototype$15.aggregate = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "aggregate", value);
      return obj;
    } else {
      return get(this, "aggregate");
    }
  };

  prototype$15.groupby = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "groupby", value);
      return obj;
    } else {
      return get(this, "groupby");
    }
  };

  function aggregate(...args) {
    return new _aggregate(...args);
  }

  function _bin(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "field", args[0]);
    set(this, "bin", args[1] !== undefined ? args[1] : true);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$16 = proto(_bin);

  prototype$16.as = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$16.bin = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "bin", value);
      return obj;
    } else {
      return get(this, "bin");
    }
  };

  prototype$16.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  function bin(...args) {
    return new _bin(...args);
  }

  function _calculate(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "calculate", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$17 = proto(_calculate);

  prototype$17.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$17.calculate = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "calculate", value);
      return obj;
    } else {
      return get(this, "calculate");
    }
  };

  function calculate(...args) {
    return new _calculate(...args);
  }

  function _filter(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "filter", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$18 = proto(_filter);

  prototype$18.filter = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "filter", value);
      return obj;
    } else {
      return get(this, "filter");
    }
  };

  function filter(...args) {
    return new _filter(...args);
  }

  function _flatten(...args) {
    init(this);
    args = flat(args);
    set(this, "flatten", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$19 = proto(_flatten);

  prototype$19.as = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$19.flatten = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "flatten", value);
      return obj;
    } else {
      return get(this, "flatten");
    }
  };

  function flatten(...args) {
    return new _flatten(...args);
  }

  function _fold(...args) {
    init(this);
    args = flat(args);
    set(this, "fold", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1a = proto(_fold);

  prototype$1a.as = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1a.fold = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "fold", value);
      return obj;
    } else {
      return get(this, "fold");
    }
  };

  function fold(...args) {
    return new _fold(...args);
  }

  function _impute(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "impute", args[0]);
    if (args[1] !== undefined) set(this, "key", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1b = proto(_impute);

  prototype$1b.frame = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "frame", value);
      return obj;
    } else {
      return get(this, "frame");
    }
  };

  prototype$1b.groupby = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "groupby", value);
      return obj;
    } else {
      return get(this, "groupby");
    }
  };

  prototype$1b.impute = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "impute", value);
      return obj;
    } else {
      return get(this, "impute");
    }
  };

  prototype$1b.key = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "key", value);
      return obj;
    } else {
      return get(this, "key");
    }
  };

  prototype$1b.keyvals = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "keyvals", value);
      return obj;
    } else {
      return get(this, "keyvals");
    }
  };

  prototype$1b.method = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "method", value);
      return obj;
    } else {
      return get(this, "method");
    }
  };

  prototype$1b.value = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "value", value);
      return obj;
    } else {
      return get(this, "value");
    }
  };

  function impute(...args) {
    return new _impute(...args);
  }

  function _joinaggregate(...args) {
    init(this);
    args = flat(args);
    set(this, "joinaggregate", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1c = proto(_joinaggregate);

  prototype$1c.groupby = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "groupby", value);
      return obj;
    } else {
      return get(this, "groupby");
    }
  };

  prototype$1c.joinaggregate = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "joinaggregate", value);
      return obj;
    } else {
      return get(this, "joinaggregate");
    }
  };

  function joinaggregate(...args) {
    return new _joinaggregate(...args);
  }

  function _join(...args) {
    init(this);
    args = flat(args);
    set(this, "joinaggregate", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1d = proto(_join);

  prototype$1d.groupby = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "groupby", value);
      return obj;
    } else {
      return get(this, "groupby");
    }
  };

  prototype$1d.joinaggregate = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "joinaggregate", value);
      return obj;
    } else {
      return get(this, "joinaggregate");
    }
  };

  function join(...args) {
    return new _join(...args);
  }

  function _lookup(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "lookup", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1e = proto(_lookup);

  prototype$1e.as = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1e.default = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "default", value);
      return obj;
    } else {
      return get(this, "default");
    }
  };

  prototype$1e.from = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "from", value);
      return obj;
    } else {
      return get(this, "from");
    }
  };

  prototype$1e.lookup = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lookup", value);
      return obj;
    } else {
      return get(this, "lookup");
    }
  };

  function lookup(...args) {
    return new _lookup(...args);
  }

  function _sample(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "sample", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1f = proto(_sample);

  prototype$1f.sample = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "sample", value);
      return obj;
    } else {
      return get(this, "sample");
    }
  };

  function sample(...args) {
    return new _sample(...args);
  }

  function _stack(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "stack", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1g = proto(_stack);

  prototype$1g.as = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1g.groupby = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "groupby", value);
      return obj;
    } else {
      return get(this, "groupby");
    }
  };

  prototype$1g.offset = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "offset", value);
      return obj;
    } else {
      return get(this, "offset");
    }
  };

  prototype$1g.sort = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$1g.stack = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "stack", value);
      return obj;
    } else {
      return get(this, "stack");
    }
  };

  function stack(...args) {
    return new _stack(...args);
  }

  function _timeUnit(...args) {
    init(this);
    if (args[0] !== undefined) set(this, "timeUnit", args[0]);
    if (args[1] !== undefined) set(this, "field", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1h = proto(_timeUnit);

  prototype$1h.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1h.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1h.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  function timeUnit(...args) {
    return new _timeUnit(...args);
  }

  function _window(...args) {
    init(this);
    args = flat(args);
    set(this, "window", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1i = proto(_window);

  prototype$1i.frame = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "frame", value);
      return obj;
    } else {
      return get(this, "frame");
    }
  };

  prototype$1i.groupby = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "groupby", value);
      return obj;
    } else {
      return get(this, "groupby");
    }
  };

  prototype$1i.ignorePeers = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "ignorePeers", value);
      return obj;
    } else {
      return get(this, "ignorePeers");
    }
  };

  prototype$1i.sort = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "sort", value);
      return obj;
    } else {
      return get(this, "sort");
    }
  };

  prototype$1i.window = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "window", value);
      return obj;
    } else {
      return get(this, "window");
    }
  };

  function window(...args) {
    return new _window(...args);
  }

  function _groupby(...args) {
    init(this);
    args = flat(args);
    set(this, "groupby", args);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1j = proto(_groupby);

  prototype$1j.aggregate = function(...values) {
    const obj = aggregate(...values);
    return assign(obj, this);
  };

  prototype$1j.join = function(...values) {
    const obj = joinaggregate(...values);
    return assign(obj, this);
  };

  prototype$1j.joinaggregate = function(...values) {
    const obj = joinaggregate(...values);
    return assign(obj, this);
  };

  prototype$1j.window = function(...values) {
    const obj = window(...values);
    return assign(obj, this);
  };

  function groupby(...args) {
    return new _groupby(...args);
  }

  function _count(...args) {
    init(this);
    set(this, "op", "count");
    if (args[0] !== undefined) set(this, "as", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1k = proto(_count);

  prototype$1k.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1k.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1k.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1k.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function count(...args) {
    return new _count(...args);
  }

  function _valid(...args) {
    init(this);
    set(this, "op", "valid");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1l = proto(_valid);

  prototype$1l.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1l.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1l.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1l.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function valid(...args) {
    return new _valid(...args);
  }

  function _missing(...args) {
    init(this);
    set(this, "op", "missing");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1m = proto(_missing);

  prototype$1m.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1m.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1m.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1m.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function missing(...args) {
    return new _missing(...args);
  }

  function _distinct(...args) {
    init(this);
    set(this, "op", "distinct");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1n = proto(_distinct);

  prototype$1n.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1n.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1n.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1n.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function distinct(...args) {
    return new _distinct(...args);
  }

  function _sum(...args) {
    init(this);
    set(this, "op", "sum");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1o = proto(_sum);

  prototype$1o.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1o.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1o.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1o.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function sum(...args) {
    return new _sum(...args);
  }

  function _mean(...args) {
    init(this);
    set(this, "op", "mean");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1p = proto(_mean);

  prototype$1p.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1p.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1p.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1p.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function mean(...args) {
    return new _mean(...args);
  }

  function _average(...args) {
    init(this);
    set(this, "op", "average");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1q = proto(_average);

  prototype$1q.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1q.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1q.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1q.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function average(...args) {
    return new _average(...args);
  }

  function _variance(...args) {
    init(this);
    set(this, "op", "variance");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1r = proto(_variance);

  prototype$1r.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1r.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1r.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1r.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function variance(...args) {
    return new _variance(...args);
  }

  function _variancep(...args) {
    init(this);
    set(this, "op", "variancep");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1s = proto(_variancep);

  prototype$1s.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1s.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1s.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1s.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function variancep(...args) {
    return new _variancep(...args);
  }

  function _stdev(...args) {
    init(this);
    set(this, "op", "stdev");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1t = proto(_stdev);

  prototype$1t.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1t.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1t.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1t.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function stdev(...args) {
    return new _stdev(...args);
  }

  function _stdevp(...args) {
    init(this);
    set(this, "op", "stdevp");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1u = proto(_stdevp);

  prototype$1u.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1u.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1u.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1u.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function stdevp(...args) {
    return new _stdevp(...args);
  }

  function _stderr(...args) {
    init(this);
    set(this, "op", "stderr");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1v = proto(_stderr);

  prototype$1v.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1v.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1v.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1v.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function stderr(...args) {
    return new _stderr(...args);
  }

  function _median(...args) {
    init(this);
    set(this, "op", "median");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1w = proto(_median);

  prototype$1w.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1w.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1w.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1w.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function median(...args) {
    return new _median(...args);
  }

  function _q1(...args) {
    init(this);
    set(this, "op", "q1");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1x = proto(_q1);

  prototype$1x.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1x.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1x.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1x.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function q1(...args) {
    return new _q1(...args);
  }

  function _q3(...args) {
    init(this);
    set(this, "op", "q3");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1y = proto(_q3);

  prototype$1y.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1y.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1y.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1y.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function q3(...args) {
    return new _q3(...args);
  }

  function _ci0(...args) {
    init(this);
    set(this, "op", "ci0");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1z = proto(_ci0);

  prototype$1z.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1z.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1z.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1z.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function ci0(...args) {
    return new _ci0(...args);
  }

  function _ci1(...args) {
    init(this);
    set(this, "op", "ci1");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1A = proto(_ci1);

  prototype$1A.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1A.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1A.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1A.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function ci1(...args) {
    return new _ci1(...args);
  }

  function _min(...args) {
    init(this);
    set(this, "op", "min");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1B = proto(_min);

  prototype$1B.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1B.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1B.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1B.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function min(...args) {
    return new _min(...args);
  }

  function _max(...args) {
    init(this);
    set(this, "op", "max");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1C = proto(_max);

  prototype$1C.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1C.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1C.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1C.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function max(...args) {
    return new _max(...args);
  }

  function _argmin(...args) {
    init(this);
    set(this, "op", "argmin");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1D = proto(_argmin);

  prototype$1D.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1D.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1D.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1D.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function argmin(...args) {
    return new _argmin(...args);
  }

  function _argmax(...args) {
    init(this);
    set(this, "op", "argmax");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1E = proto(_argmax);

  prototype$1E.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1E.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1E.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1E.order = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "order", value);
      return obj;
    } else {
      return get(this, "order");
    }
  };

  function argmax(...args) {
    return new _argmax(...args);
  }

  function _row_number(...args) {
    init(this);
    set(this, "op", "row_number");
    if (args[0] !== undefined) set(this, "as", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1F = proto(_row_number);

  prototype$1F.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1F.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1F.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1F.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function row_number(...args) {
    return new _row_number(...args);
  }

  function _rank(...args) {
    init(this);
    set(this, "op", "rank");
    if (args[0] !== undefined) set(this, "as", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1G = proto(_rank);

  prototype$1G.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1G.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1G.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1G.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function rank(...args) {
    return new _rank(...args);
  }

  function _dense_rank(...args) {
    init(this);
    set(this, "op", "dense_rank");
    if (args[0] !== undefined) set(this, "as", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1H = proto(_dense_rank);

  prototype$1H.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1H.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1H.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1H.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function dense_rank(...args) {
    return new _dense_rank(...args);
  }

  function _percent_rank(...args) {
    init(this);
    set(this, "op", "percent_rank");
    if (args[0] !== undefined) set(this, "as", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1I = proto(_percent_rank);

  prototype$1I.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1I.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1I.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1I.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function percent_rank(...args) {
    return new _percent_rank(...args);
  }

  function _cume_dist(...args) {
    init(this);
    set(this, "op", "cume_dist");
    if (args[0] !== undefined) set(this, "as", args[0]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1J = proto(_cume_dist);

  prototype$1J.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1J.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1J.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1J.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function cume_dist(...args) {
    return new _cume_dist(...args);
  }

  function _ntile(...args) {
    init(this);
    set(this, "op", "ntile");
    if (args[0] !== undefined) set(this, "param", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1K = proto(_ntile);

  prototype$1K.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1K.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1K.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1K.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function ntile(...args) {
    return new _ntile(...args);
  }

  function _lag(...args) {
    init(this);
    set(this, "op", "lag");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "param", args[1]);
    if (args[2] !== undefined) set(this, "as", args[2]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1L = proto(_lag);

  prototype$1L.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1L.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1L.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1L.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function lag(...args) {
    return new _lag(...args);
  }

  function _lead(...args) {
    init(this);
    set(this, "op", "lead");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "param", args[1]);
    if (args[2] !== undefined) set(this, "as", args[2]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1M = proto(_lead);

  prototype$1M.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1M.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1M.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1M.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function lead(...args) {
    return new _lead(...args);
  }

  function _first_value(...args) {
    init(this);
    set(this, "op", "first_value");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1N = proto(_first_value);

  prototype$1N.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1N.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1N.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1N.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function first_value(...args) {
    return new _first_value(...args);
  }

  function _last_value(...args) {
    init(this);
    set(this, "op", "last_Value");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1O = proto(_last_value);

  prototype$1O.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1O.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1O.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1O.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function last_value(...args) {
    return new _last_value(...args);
  }

  function _nth_value(...args) {
    init(this);
    set(this, "op", "nth_value");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "param", args[1]);
    if (args[2] !== undefined) set(this, "as", args[2]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1P = proto(_nth_value);

  prototype$1P.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1P.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1P.op = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "op", value);
      return obj;
    } else {
      return get(this, "op");
    }
  };

  prototype$1P.param = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "param", value);
      return obj;
    } else {
      return get(this, "param");
    }
  };

  function nth_value(...args) {
    return new _nth_value(...args);
  }

  function _year(...args) {
    init(this);
    set(this, "timeUnit", "year");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1Q = proto(_year);

  prototype$1Q.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1Q.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1Q.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1Q.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1Q.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1Q.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1Q.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1Q.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1Q.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1Q.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1Q.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function year(...args) {
    return new _year(...args);
  }

  function _quarter(...args) {
    init(this);
    set(this, "timeUnit", "quarter");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1R = proto(_quarter);

  prototype$1R.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1R.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1R.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1R.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1R.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1R.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1R.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1R.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1R.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1R.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1R.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function quarter(...args) {
    return new _quarter(...args);
  }

  function _month(...args) {
    init(this);
    set(this, "timeUnit", "month");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1S = proto(_month);

  prototype$1S.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1S.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1S.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1S.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1S.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1S.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1S.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1S.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1S.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1S.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1S.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function month(...args) {
    return new _month(...args);
  }

  function _day(...args) {
    init(this);
    set(this, "timeUnit", "day");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1T = proto(_day);

  prototype$1T.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1T.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1T.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1T.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1T.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1T.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1T.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1T.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1T.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1T.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1T.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function day(...args) {
    return new _day(...args);
  }

  function _date(...args) {
    init(this);
    set(this, "timeUnit", "date");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1U = proto(_date);

  prototype$1U.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1U.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1U.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1U.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1U.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1U.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1U.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1U.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1U.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1U.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1U.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function date(...args) {
    return new _date(...args);
  }

  function _hours(...args) {
    init(this);
    set(this, "timeUnit", "hours");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1V = proto(_hours);

  prototype$1V.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1V.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1V.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1V.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1V.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1V.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1V.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1V.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1V.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1V.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1V.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function hours(...args) {
    return new _hours(...args);
  }

  function _minutes(...args) {
    init(this);
    set(this, "timeUnit", "minutes");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1W = proto(_minutes);

  prototype$1W.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1W.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1W.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1W.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1W.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1W.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1W.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1W.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1W.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1W.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1W.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function minutes(...args) {
    return new _minutes(...args);
  }

  function _seconds(...args) {
    init(this);
    set(this, "timeUnit", "seconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1X = proto(_seconds);

  prototype$1X.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1X.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1X.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1X.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1X.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1X.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1X.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1X.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1X.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1X.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1X.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function seconds(...args) {
    return new _seconds(...args);
  }

  function _milliseconds(...args) {
    init(this);
    set(this, "timeUnit", "milliseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1Y = proto(_milliseconds);

  prototype$1Y.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1Y.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1Y.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1Y.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1Y.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1Y.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1Y.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1Y.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1Y.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1Y.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1Y.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function milliseconds(...args) {
    return new _milliseconds(...args);
  }

  function _yearmonth(...args) {
    init(this);
    set(this, "timeUnit", "yearmonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1Z = proto(_yearmonth);

  prototype$1Z.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1Z.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1Z.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1Z.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1Z.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1Z.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1Z.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1Z.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1Z.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1Z.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1Z.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function yearmonth(...args) {
    return new _yearmonth(...args);
  }

  function _timeYQ(...args) {
    init(this);
    set(this, "timeUnit", "yearquarter");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1_ = proto(_timeYQ);

  prototype$1_.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1_.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1_.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1_.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1_.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1_.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1_.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1_.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1_.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1_.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1_.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeYQ(...args) {
    return new _timeYQ(...args);
  }

  function _timeYQM(...args) {
    init(this);
    set(this, "timeUnit", "yearquartermonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$1$ = proto(_timeYQM);

  prototype$1$.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$1$.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$1$.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$1$.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$1$.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$1$.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$1$.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$1$.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$1$.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$1$.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$1$.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeYQM(...args) {
    return new _timeYQM(...args);
  }

  function _timeYM(...args) {
    init(this);
    set(this, "timeUnit", "yearmonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$20 = proto(_timeYM);

  prototype$20.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$20.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$20.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$20.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$20.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$20.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$20.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$20.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$20.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$20.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$20.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeYM(...args) {
    return new _timeYM(...args);
  }

  function _timeYMD(...args) {
    init(this);
    set(this, "timeUnit", "yearmonthdate");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$21 = proto(_timeYMD);

  prototype$21.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$21.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$21.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$21.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$21.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$21.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$21.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$21.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$21.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$21.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$21.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeYMD(...args) {
    return new _timeYMD(...args);
  }

  function _timeYMDH(...args) {
    init(this);
    set(this, "timeUnit", "yearmonthdatehours");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$22 = proto(_timeYMDH);

  prototype$22.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$22.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$22.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$22.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$22.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$22.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$22.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$22.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$22.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$22.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$22.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeYMDH(...args) {
    return new _timeYMDH(...args);
  }

  function _timeYMDHM(...args) {
    init(this);
    set(this, "timeUnit", "yearmonthdatehoursminutes");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$23 = proto(_timeYMDHM);

  prototype$23.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$23.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$23.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$23.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$23.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$23.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$23.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$23.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$23.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$23.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$23.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeYMDHM(...args) {
    return new _timeYMDHM(...args);
  }

  function _timeYMDHMS(...args) {
    init(this);
    set(this, "timeUnit", "yearmonthdatehoursminutesseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$24 = proto(_timeYMDHMS);

  prototype$24.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$24.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$24.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$24.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$24.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$24.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$24.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$24.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$24.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$24.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$24.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeYMDHMS(...args) {
    return new _timeYMDHMS(...args);
  }

  function _timeQM(...args) {
    init(this);
    set(this, "timeUnit", "quartermonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$25 = proto(_timeQM);

  prototype$25.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$25.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$25.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$25.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$25.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$25.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$25.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$25.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$25.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$25.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$25.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeQM(...args) {
    return new _timeQM(...args);
  }

  function _timeMD(...args) {
    init(this);
    set(this, "timeUnit", "monthdate");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$26 = proto(_timeMD);

  prototype$26.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$26.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$26.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$26.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$26.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$26.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$26.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$26.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$26.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$26.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$26.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeMD(...args) {
    return new _timeMD(...args);
  }

  function _timeMDH(...args) {
    init(this);
    set(this, "timeUnit", "monthdatehours");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$27 = proto(_timeMDH);

  prototype$27.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$27.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$27.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$27.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$27.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$27.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$27.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$27.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$27.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$27.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$27.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeMDH(...args) {
    return new _timeMDH(...args);
  }

  function _timeHM(...args) {
    init(this);
    set(this, "timeUnit", "hoursminutes");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$28 = proto(_timeHM);

  prototype$28.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$28.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$28.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$28.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$28.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$28.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$28.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$28.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$28.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$28.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$28.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeHM(...args) {
    return new _timeHM(...args);
  }

  function _timeHMS(...args) {
    init(this);
    set(this, "timeUnit", "hoursminutesseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$29 = proto(_timeHMS);

  prototype$29.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$29.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$29.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$29.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$29.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$29.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$29.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$29.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$29.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$29.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$29.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeHMS(...args) {
    return new _timeHMS(...args);
  }

  function _timeMS(...args) {
    init(this);
    set(this, "timeUnit", "minutesseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2a = proto(_timeMS);

  prototype$2a.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2a.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2a.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2a.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2a.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2a.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2a.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2a.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2a.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2a.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2a.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeMS(...args) {
    return new _timeMS(...args);
  }

  function _timeSMS(...args) {
    init(this);
    set(this, "timeUnit", "secondsmilliseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2b = proto(_timeSMS);

  prototype$2b.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2b.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2b.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2b.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2b.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2b.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2b.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2b.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2b.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2b.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2b.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function timeSMS(...args) {
    return new _timeSMS(...args);
  }

  function _utcyear(...args) {
    init(this);
    set(this, "timeUnit", "utcyear");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2c = proto(_utcyear);

  prototype$2c.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2c.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2c.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2c.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2c.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2c.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2c.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2c.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2c.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2c.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2c.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcyear(...args) {
    return new _utcyear(...args);
  }

  function _utcquarter(...args) {
    init(this);
    set(this, "timeUnit", "utcquarter");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2d = proto(_utcquarter);

  prototype$2d.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2d.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2d.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2d.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2d.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2d.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2d.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2d.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2d.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2d.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2d.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcquarter(...args) {
    return new _utcquarter(...args);
  }

  function _utcmonth(...args) {
    init(this);
    set(this, "timeUnit", "utcmonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2e = proto(_utcmonth);

  prototype$2e.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2e.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2e.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2e.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2e.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2e.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2e.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2e.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2e.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2e.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2e.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcmonth(...args) {
    return new _utcmonth(...args);
  }

  function _utcday(...args) {
    init(this);
    set(this, "timeUnit", "utcday");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2f = proto(_utcday);

  prototype$2f.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2f.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2f.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2f.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2f.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2f.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2f.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2f.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2f.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2f.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2f.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcday(...args) {
    return new _utcday(...args);
  }

  function _utcdate(...args) {
    init(this);
    set(this, "timeUnit", "utcdate");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2g = proto(_utcdate);

  prototype$2g.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2g.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2g.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2g.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2g.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2g.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2g.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2g.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2g.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2g.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2g.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcdate(...args) {
    return new _utcdate(...args);
  }

  function _utchours(...args) {
    init(this);
    set(this, "timeUnit", "utchours");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2h = proto(_utchours);

  prototype$2h.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2h.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2h.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2h.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2h.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2h.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2h.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2h.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2h.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2h.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2h.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utchours(...args) {
    return new _utchours(...args);
  }

  function _utcminutes(...args) {
    init(this);
    set(this, "timeUnit", "utcminutes");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2i = proto(_utcminutes);

  prototype$2i.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2i.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2i.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2i.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2i.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2i.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2i.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2i.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2i.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2i.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2i.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcminutes(...args) {
    return new _utcminutes(...args);
  }

  function _utcseconds(...args) {
    init(this);
    set(this, "timeUnit", "utcseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2j = proto(_utcseconds);

  prototype$2j.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2j.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2j.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2j.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2j.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2j.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2j.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2j.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2j.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2j.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2j.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcseconds(...args) {
    return new _utcseconds(...args);
  }

  function _utcmilliseconds(...args) {
    init(this);
    set(this, "timeUnit", "utcmilliseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2k = proto(_utcmilliseconds);

  prototype$2k.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2k.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2k.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2k.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2k.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2k.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2k.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2k.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2k.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2k.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2k.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcmilliseconds(...args) {
    return new _utcmilliseconds(...args);
  }

  function _utcyearmonth(...args) {
    init(this);
    set(this, "timeUnit", "utcyearmonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2l = proto(_utcyearmonth);

  prototype$2l.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2l.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2l.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2l.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2l.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2l.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2l.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2l.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2l.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2l.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2l.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcyearmonth(...args) {
    return new _utcyearmonth(...args);
  }

  function _utcYQ(...args) {
    init(this);
    set(this, "timeUnit", "utcyearquarter");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2m = proto(_utcYQ);

  prototype$2m.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2m.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2m.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2m.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2m.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2m.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2m.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2m.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2m.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2m.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2m.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcYQ(...args) {
    return new _utcYQ(...args);
  }

  function _utcYQM(...args) {
    init(this);
    set(this, "timeUnit", "utcyearquartermonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2n = proto(_utcYQM);

  prototype$2n.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2n.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2n.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2n.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2n.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2n.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2n.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2n.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2n.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2n.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2n.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcYQM(...args) {
    return new _utcYQM(...args);
  }

  function _utcYM(...args) {
    init(this);
    set(this, "timeUnit", "utcyearmonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2o = proto(_utcYM);

  prototype$2o.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2o.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2o.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2o.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2o.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2o.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2o.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2o.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2o.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2o.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2o.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcYM(...args) {
    return new _utcYM(...args);
  }

  function _utcYMD(...args) {
    init(this);
    set(this, "timeUnit", "utcyearmonthdate");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2p = proto(_utcYMD);

  prototype$2p.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2p.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2p.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2p.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2p.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2p.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2p.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2p.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2p.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2p.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2p.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcYMD(...args) {
    return new _utcYMD(...args);
  }

  function _utcYMDH(...args) {
    init(this);
    set(this, "timeUnit", "utcyearmonthdatehours");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2q = proto(_utcYMDH);

  prototype$2q.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2q.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2q.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2q.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2q.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2q.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2q.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2q.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2q.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2q.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2q.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcYMDH(...args) {
    return new _utcYMDH(...args);
  }

  function _utcYMDHM(...args) {
    init(this);
    set(this, "timeUnit", "utcyearmonthdatehoursminutes");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2r = proto(_utcYMDHM);

  prototype$2r.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2r.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2r.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2r.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2r.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2r.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2r.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2r.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2r.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2r.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2r.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcYMDHM(...args) {
    return new _utcYMDHM(...args);
  }

  function _utcYMDHMS(...args) {
    init(this);
    set(this, "timeUnit", "utcyearmonthdatehoursminutesseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2s = proto(_utcYMDHMS);

  prototype$2s.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2s.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2s.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2s.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2s.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2s.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2s.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2s.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2s.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2s.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2s.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcYMDHMS(...args) {
    return new _utcYMDHMS(...args);
  }

  function _utcQM(...args) {
    init(this);
    set(this, "timeUnit", "utcquartermonth");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2t = proto(_utcQM);

  prototype$2t.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2t.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2t.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2t.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2t.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2t.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2t.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2t.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2t.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2t.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2t.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcQM(...args) {
    return new _utcQM(...args);
  }

  function _utcMD(...args) {
    init(this);
    set(this, "timeUnit", "utcmonthdate");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2u = proto(_utcMD);

  prototype$2u.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2u.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2u.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2u.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2u.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2u.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2u.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2u.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2u.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2u.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2u.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcMD(...args) {
    return new _utcMD(...args);
  }

  function _utcMDH(...args) {
    init(this);
    set(this, "timeUnit", "utcmonthdatehours");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2v = proto(_utcMDH);

  prototype$2v.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2v.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2v.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2v.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2v.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2v.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2v.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2v.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2v.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2v.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2v.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcMDH(...args) {
    return new _utcMDH(...args);
  }

  function _utcHM(...args) {
    init(this);
    set(this, "timeUnit", "utchoursminutes");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2w = proto(_utcHM);

  prototype$2w.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2w.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2w.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2w.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2w.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2w.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2w.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2w.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2w.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2w.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2w.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcHM(...args) {
    return new _utcHM(...args);
  }

  function _utcHMS(...args) {
    init(this);
    set(this, "timeUnit", "utchoursminutesseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2x = proto(_utcHMS);

  prototype$2x.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2x.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2x.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2x.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2x.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2x.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2x.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2x.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2x.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2x.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2x.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcHMS(...args) {
    return new _utcHMS(...args);
  }

  function _utcMS(...args) {
    init(this);
    set(this, "timeUnit", "utcminutesseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2y = proto(_utcMS);

  prototype$2y.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2y.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2y.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2y.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2y.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2y.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2y.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2y.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2y.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2y.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2y.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcMS(...args) {
    return new _utcMS(...args);
  }

  function _utcSMS(...args) {
    init(this);
    set(this, "timeUnit", "utcsecondsmilliseconds");
    if (args[0] !== undefined) set(this, "field", args[0]);
    if (args[1] !== undefined) set(this, "as", args[1]);
  }

  // eslint-disable-next-line no-unused-vars
  const prototype$2z = proto(_utcSMS);

  prototype$2z.as = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "as", value);
      return obj;
    } else {
      return get(this, "as");
    }
  };

  prototype$2z.field = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "field", value);
      return obj;
    } else {
      return get(this, "field");
    }
  };

  prototype$2z.timeUnit = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "timeUnit", value);
      return obj;
    } else {
      return get(this, "timeUnit");
    }
  };

  prototype$2z.equals = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "equal", value);
      return obj;
    } else {
      return get(this, "equal");
    }
  };

  prototype$2z.gte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gte", value);
      return obj;
    } else {
      return get(this, "gte");
    }
  };

  prototype$2z.gt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "gt", value);
      return obj;
    } else {
      return get(this, "gt");
    }
  };

  prototype$2z.lte = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lte", value);
      return obj;
    } else {
      return get(this, "lte");
    }
  };

  prototype$2z.lt = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "lt", value);
      return obj;
    } else {
      return get(this, "lt");
    }
  };

  prototype$2z.oneOf = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "oneOf", value);
      return obj;
    } else {
      return get(this, "oneOf");
    }
  };

  prototype$2z.inRange = function(...value) {
    if (arguments.length) {
      const obj = copy(this);
      value = flat(value);
      set(obj, "range", value);
      return obj;
    } else {
      return get(this, "range");
    }
  };

  prototype$2z.valid = function(value) {
    if (arguments.length) {
      const obj = copy(this);
      set(obj, "valid", value);
      return obj;
    } else {
      return get(this, "valid");
    }
  };

  function utcSMS(...args) {
    return new _utcSMS(...args);
  }

  exports.aggregate = aggregate;
  exports.and = and;
  exports.argmax = argmax;
  exports.argmin = argmin;
  exports.average = average;
  exports.bin = bin;
  exports.calculate = calculate;
  exports.checkbox = checkbox;
  exports.ci0 = ci0;
  exports.ci1 = ci1;
  exports.color = color;
  exports.column = column;
  exports.count = count;
  exports.csv = csv;
  exports.csvFormat = csvFormat;
  exports.cume_dist = cume_dist;
  exports.data = data;
  exports.date = date;
  exports.day = day;
  exports.dense_rank = dense_rank;
  exports.detail = detail;
  exports.distinct = distinct;
  exports.dsv = dsv;
  exports.dsvFormat = dsvFormat;
  exports.encoding = encoding;
  exports.facet = facet;
  exports.field = field;
  exports.fieldN = fieldN;
  exports.fieldO = fieldO;
  exports.fieldQ = fieldQ;
  exports.fieldT = fieldT;
  exports.fill = fill;
  exports.fillOpacity = fillOpacity;
  exports.filter = filter;
  exports.first_value = first_value;
  exports.flatten = flatten;
  exports.fold = fold;
  exports.graticule = graticule;
  exports.groupby = groupby;
  exports.hconcat = hconcat;
  exports.hours = hours;
  exports.href = href;
  exports.impute = impute;
  exports.join = join;
  exports.joinaggregate = joinaggregate;
  exports.json = json;
  exports.jsonFormat = jsonFormat;
  exports.key = key;
  exports.lag = lag;
  exports.last_value = last_value;
  exports.latitude = latitude;
  exports.latitude2 = latitude2;
  exports.layer = layer;
  exports.lead = lead;
  exports.longitude = longitude;
  exports.longitude2 = longitude2;
  exports.lookup = lookup;
  exports.lookupData = lookupData;
  exports.mark = mark;
  exports.markArea = markArea;
  exports.markBar = markBar;
  exports.markBoxplot = markBoxplot;
  exports.markCircle = markCircle;
  exports.markErrorband = markErrorband;
  exports.markErrorbar = markErrorbar;
  exports.markGeoshape = markGeoshape;
  exports.markLine = markLine;
  exports.markPoint = markPoint;
  exports.markRect = markRect;
  exports.markRule = markRule;
  exports.markSquare = markSquare;
  exports.markText = markText;
  exports.markTick = markTick;
  exports.markTrail = markTrail;
  exports.max = max;
  exports.mean = mean;
  exports.median = median;
  exports.menu = menu;
  exports.milliseconds = milliseconds;
  exports.min = min;
  exports.minutes = minutes;
  exports.missing = missing;
  exports.month = month;
  exports.not = not;
  exports.nth_value = nth_value;
  exports.ntile = ntile;
  exports.opacity = opacity;
  exports.or = or;
  exports.order = order;
  exports.percent_rank = percent_rank;
  exports.projection = projection;
  exports.q1 = q1;
  exports.q3 = q3;
  exports.quarter = quarter;
  exports.radio = radio;
  exports.rank = rank;
  exports.register = register;
  exports.repeat = repeat;
  exports.row = row;
  exports.row_number = row_number;
  exports.sample = sample;
  exports.seconds = seconds;
  exports.selectInterval = selectInterval;
  exports.selectMulti = selectMulti;
  exports.selectSingle = selectSingle;
  exports.sequence = sequence;
  exports.shape = shape;
  exports.size = size;
  exports.slider = slider;
  exports.sphere = sphere;
  exports.stack = stack;
  exports.stderr = stderr;
  exports.stdev = stdev;
  exports.stdevp = stdevp;
  exports.stroke = stroke;
  exports.strokeOpacity = strokeOpacity;
  exports.strokeWidth = strokeWidth;
  exports.sum = sum;
  exports.text = text;
  exports.timeHM = timeHM;
  exports.timeHMS = timeHMS;
  exports.timeMD = timeMD;
  exports.timeMDH = timeMDH;
  exports.timeMS = timeMS;
  exports.timeQM = timeQM;
  exports.timeSMS = timeSMS;
  exports.timeUnit = timeUnit;
  exports.timeYM = timeYM;
  exports.timeYMD = timeYMD;
  exports.timeYMDH = timeYMDH;
  exports.timeYMDHM = timeYMDHM;
  exports.timeYMDHMS = timeYMDHMS;
  exports.timeYQ = timeYQ;
  exports.timeYQM = timeYQM;
  exports.tooltip = tooltip;
  exports.topojson = topojson;
  exports.topojsonFormat = topojsonFormat;
  exports.tsv = tsv;
  exports.tsvFormat = tsvFormat;
  exports.url = url;
  exports.utcHM = utcHM;
  exports.utcHMS = utcHMS;
  exports.utcMD = utcMD;
  exports.utcMDH = utcMDH;
  exports.utcMS = utcMS;
  exports.utcQM = utcQM;
  exports.utcSMS = utcSMS;
  exports.utcYM = utcYM;
  exports.utcYMD = utcYMD;
  exports.utcYMDH = utcYMDH;
  exports.utcYMDHM = utcYMDHM;
  exports.utcYMDHMS = utcYMDHMS;
  exports.utcYQ = utcYQ;
  exports.utcYQM = utcYQM;
  exports.utcdate = utcdate;
  exports.utcday = utcday;
  exports.utchours = utchours;
  exports.utcmilliseconds = utcmilliseconds;
  exports.utcminutes = utcminutes;
  exports.utcmonth = utcmonth;
  exports.utcquarter = utcquarter;
  exports.utcseconds = utcseconds;
  exports.utcyear = utcyear;
  exports.utcyearmonth = utcyearmonth;
  exports.valid = valid;
  exports.value = value;
  exports.values = values;
  exports.variance = variance;
  exports.variancep = variancep;
  exports.vconcat = vconcat;
  exports.window = window;
  exports.x = x;
  exports.x2 = x2;
  exports.xError = xError;
  exports.xError2 = xError2;
  exports.y = y;
  exports.y2 = y2;
  exports.yError = yError;
  exports.yError2 = yError2;
  exports.year = year;
  exports.yearmonth = yearmonth;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
